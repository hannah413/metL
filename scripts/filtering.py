"""Functions for filtering metabolomic data.
"""

import pandas as pd
from scripts.file_conversion import *

def keep_if_both(sif_series, mwu_df, mwu_p, corr_df, c1, run_name):
    """Filters a reference sif so that an edge between two
    metabolites is maintained only if both metabolites are
        (1) present in the original data
        (2) sufficiently different between the two experimental groups
        (3) sufficiently correlated with one another

    Arguments:
        sif_series (pandas Series of lists)
            A reference sif in the format of a pandas Series.
            Each key in the series is a producer in the reference sif.
            Each value is a list of metabolites produced by that producer.
        mwu_df (pandas.DataFrame)
            Dataframe of shape (n_metabs, ['stat', 'pval']]. Contains Mann
            Whitney U test statistics and p-values.
        mwu_p (float)
            Maximum Mann Whitney U p-value. Used as a threshold to filter out
            metabolites who are not significantly different between the two
            experimental groups.
        corr_df (pandas.DataFrame)
            Dataframe of shape (n_metabs, n_metabs) containing Spearman rank
            order correlation coefficients and p-values among all pairs of
            metabolites. Each cell contains a tuple (coef, pval).
        c1 (float)
            Spearman correlation threshold used to filter out edges between
            metabolites that directly interact.
            (i.e. between A and B in "A used-to-produce B").

    Returns:
        both_sif_series (pandas Series of lists)
            Format consistent with sif_series, but this is a filtered version
            as described above.
    """

    both_sif_series = pd.Series()

    # todo: make this look less like a staircase of ifs
    for producer in sif_series.index:

        # check 1: present in original data
        if producer in corr_df.index:

            # check 2: different between 2 groups
            if mwu_df.loc[producer]['pval'] <= mwu_p:

                for produced in sif_series[producer]:

                    # check 3: sufficiently correlated w/ one another
                    if corr_df.loc[producer][produced] <= c1:

                        # add to both_sif_series
                        if producer in both_sif_series.index:
                            both_sif_series[producer].append(produced)
                        elif producer not in both_sif_series.index:
                            both_sif_series[producer] = [produced]

    # write the sif out to file
    file_conversion.write_out_sif_series(sif_series=both_sif_series,
                                         output_name=run_name + "_BOTH")

    return both_sif_series


def keep_if_either(sif_series, mwu_df, mwu_p, both_sif_series):
    """Builds on both_sif generated by keep_if_both() function (above).
    Incorporates both_sif edges into either_sif, and adds edges into
    the new sif if at least one member is present in the original data
    with a satisfactory mwu_p value.

    Arguments:
        The following arguments are previously described in keep_if_both():
            sif_series (pandas Series of lists)
            mwu_df (pandas DataFrame)
            mwu_p (float)
            both_sif_series (pandas Series of lists)

    Returns:
        either_sif_series (pandas Series of lists)
            Format consistent with sif_series, but this is a filtered version
            as described above.
    """
    # initialize either_sif_series with the contents of both_sif_series
    either_sif_series = both_sif_series

    # todo: remember to .replace('_BOTH.sif', '_EITHER.sif')

    pass


def keep_dist2(sif_series, mwu_df, mwu_p, corr_df, c1, c2, either_sif_series):
    """Builds on both_sif generated by keep_if_both() function (above).
    Incorporates both_sif edges into either_sif, and adds edges into
    the new sif if at least one member is present in the original data
    with a satisfactory mwu_p value.

    Arguments:
        The following arguments are previously described in keep_if_both():
            sif_series (pandas Series of lists)
            mwu_df (pandas DataFrame)
            mwu_p (float)
            corr_df (pandas.DataFrame)
            c1 (float)
            either_sif_series (pandas Series of lists)
        c2 (float)
            Spearman correlation threshold used to filter out edges between
            metabolites that indirectly interact with 2 edges between them
            (i.e. between A and C in "A used-to-produce B used-to-produce C").

    Returns:
        dist2_sif_series (pandas Series of lists)
            Format consistent with sif_series, but this is a filtered version
            as described above.
    """
    pass
